# --- Agent Profile: NoteTakerAgent (v1.1 for Schema v0.3 LLM Output) ---
# Specialized agent for managing notes within a designated workspace.

version: "agent-1.1"

# --- Core Identity & Configuration ---
name: "NoteTakerAgent"
description: |
  A specialized agent for creating, reading, and managing text-based notes.
  It operates primarily using a file management tool within its designated workspace.
  All interactions and outputs adhere to the Chimera Ecosystem's standard JSON schema v0.3.

# System prompt defining the expected LLM interaction model.
# This prompt MUST align with llm-json-output-draft-0.3.
system_prompt: "sysprompts/note.md" # Specific system prompt for this agent

# --- Default Iteration Cap ---
iteration_cap: 5 # Note-taking tasks are usually more direct.

# --- Environment Variables (Agent-Specific) ---
# The AGENT_WORKSPACE environment variable will be set by the C++ runtime (e.g. via Docker or startup script)
# and used by the 'file' tool internally to resolve paths.
# This agent's prompts might refer to it conceptually, e.g., "within your workspace".
environment:
  DEFAULT_NOTE_DIR: "${NOTES}"
  NOTE_FORMAT: "Markdown"
  USER_PERSONALITY_PROFILE: "./.user-profile.md (ps. this is for you. you may use this file to help you keep tab of important key personality/behavioral/preferential insights about the user or about the parent agent.)"
  LANGUAGE: "en-US"

# --- Agent Capabilities: Tools ---
# Declares tools this agent profile expects to be registered and available for its use.
# The actual tool implementations (e.g., ScriptTool for 'file') are handled by the C++ Agent.
# The LLM will use the 'name' specified here in its 'actions' array.

tools:
  # Example: A 'bash' tool is commonly registered.
  # The LLM would refer to it by its 'name' (e.g., "bash").
  # This section doesn't *load* the tool code itself from YAML.
    BashExecutor:
      name: "bash" # Internal name used when attaching to agents.
      description: "Executes a bash command provided as input."
      type: "code" # Specifies this tool i  s implemented via code. FUTURE: Add "api", "service", file
      runtime: "bash" # Specifies the execution runtime for 'code' type. FUTURE: Add "python", "nodejs".
      code: | # The actual code to execute. Input mapping TBD (e.g., via parameters).
        #!/bin/bash
        echo "Executing command: $1" >&2 # Example logging
        eval "$1" # WARNING: Security risk! Needs sandboxing/safer execution. Placeholder only.
    websearch:
      name: "websearch" # Internal name used when attaching to agents.
      description: "Searches the web."
      type: "file" # do we even need this, it could just be infered through the addition of path
      path: "./script/standard/websearch.py"
      runtime: "python" # Specifies the execution runtime for 'code' type. FUTURE: Add "python", "nodejs".
      # parameters: # FUTURE: Define expected input parameters and types for validation/prompting.
      # command: { type: "string", description: "The bash command to execute." }
      

# --- LLM Interaction Schema (Guidance for the LLM) ---
# This 'schema' field provides the LLM with the *exact* JSON structure it MUST output.
# It should be identical to the one in standard.yaml if using the same core schema.
schema: |
  {
    "status": "string (REQUIRED, Enum: SUCCESS_FINAL | REQUIRES_ACTION | REQUIRES_CLARIFICATION | ERROR_INTERNAL)",
    "thoughts": [
      {
        "type": "string (REQUIRED, Enum: PLAN | OBSERVATION | QUESTION | HYPOTHESIS | CRITIQUE | ASSUMPTION | GOAL | NORM | DECISION | LONG_TERM | SHORT_TERM)",
        "content": "string (REQUIRED, The textual content of the thought.)"
      }
    ],
    "actions": [
      {
        "action": "string (REQUIRED, Name of the tool, script, or internal function to execute.)",
        "type": "string (REQUIRED, Enum: tool | script | internal_function | output | workflow_control | http_request)",
        "params": {
          "param_name": "value (structure depends on the action)"
        },
        "confidence": "float (OPTIONAL, 0.0-1.0, LLM's confidence in this action/parameters.)",
        "warnings": [
          "string (OPTIONAL, Any warnings about this specific action or its parameters.)"
        ]
      }
    ],
    "final_response": "string | null (REQUIRED, User-facing response. Null if actions are pending or status is not SUCCESS_FINAL/REQUIRES_CLARIFICATION.)"
  }

# --- LLM Interaction Example (Guidance for the LLM) ---
# Illustrates a typical interaction for this NoteTakerAgent.
example: |
  # User Input (to Orchestrator, then delegated to NoteTakerAgent): "Take a note: Remember to buy GregTech components."
  # Expected LLM Output JSON from NoteTakerAgent:
  {
    "status": "REQUIRES_ACTION",
    "thoughts": [
      {
        "type": "PLAN",
        "content": "User wants to save a new note. I will use the 'file' tool with the 'write' action. No specific path given, so I will use the DEFAULT_NOTE_FILE."
      },
      {
        "type": "OBSERVATION",
        "content": "The DEFAULT_NOTE_FILE is 'quick_notes.md'. The content of the note is 'Remember to buy GregTech components.' I should consider appending if the file exists, or indicate this choice in thought for the orchestrator if ambiguity is high."
      }
    ],
    "actions": [
      {
        "action": "file",
        "type": "tool",
        "params": {
          "action": "write", # Or "append" depending on desired behavior for existing files.
                            # The 'file' tool needs to support this distinction.
          "path": "quick_notes.md", # Resolved from DEFAULT_NOTE_FILE concept.
          "content": "Remember to buy GregTech components."
        },
        "confidence": 0.98
      }
    ],
    "final_response": null
  }

# --- Additional Prompting Guidance ---
extra_prompts:
  - "Focus on managing notes within your designated workspace. Paths are always relative to this workspace."
  - "When writing notes, if a specific filename isn't provided by the user request (via the orchestrator), use the `DEFAULT_NOTE_FILE` environment variable value as the target path."
  - "Confirm actions taken (e.g., 'Note saved to X.md') in your `final_response` when `status` is `SUCCESS_FINAL`."
  - "If asked to read a note, provide its content in the `final_response` when `status` is `SUCCESS_FINAL`."
  - "If a file operation fails (e.g., permission denied, disk full - reported by the 'file' tool result in history), set `status` to `ERROR_INTERNAL` and briefly explain the issue in `final_response`."

# --- Agent Directive (Default Operational Mode) ---
directive:
  type: "EXECUTE" # This agent is typically executing specific file operations.
  description: "Manage notes (create, read, update, list) within the agent's workspace using the 'file' tool, based on precise instructions."
  format: "Confirmation of actions or retrieved note content should be provided in 'final_response'."
