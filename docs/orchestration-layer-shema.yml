version: MK1
name: "schema-building-workflow"
description: "Uses pre/post steps for localized nesting and structured agent key."

import:
  workflows: # hole-ass external workflow loading cause why the fuck not (this will obviously be ignored for now)
  agents: # yaml agent profiles
    - ./agent-test.yml # direct file location
    - ./agents # load an entire folder containing multiple agent yml profiles
  define:
    name: ... # explicit declaration here.

  # No external agents needed for this example flow

initial_state:
  query: "Find articles about AI in healthcare from the last month."
  search_result_count: 3
# or just some sort of entrypoint 
entrypoint:
  # ...
settings: #workflow settings

defines: # maybe a define section . where steps declared are only processed and not executed. potentially making their id/name reusable, maybe even importing other steps from other workflows (could be nice to have a set of standard steps).

# Types for now agent / loop / parallel / job (service mode) / workflow (call another workflow reference) / some sort of pipe mode
rules: #rules for the workflow execution maybe: auto/explicit (enforce entrypoint)
workflow: 
  - id: execute_search_query
    type: agent # This agent call has steps before and after it 
    description: "Prepare, execute, and refine a web search."
    agent: # Structured agent key
      define: # Defining inline
        name: "WebSearcher_Inline"
        system_prompt: |
          You are a web search assistant. Execute the search query precisely.
          Query: {input.search_query}
          Max Results: {input.max_results}
          Return URLs and snippets.
        tools:
          define:
            name: testTool
            description: "sample description"
            type: file/code #file containing a tool code in whatever language
            path: ...
            code: # (depending on what we support) I mainly wanna have simple bash and python here. but Im gonna put this on hol since im thinking of making a proper API for tool use.
          internal:
            - bashTool
            -
          external: #could have external api for tools (could just use python for example)
            - 
    input: # Define input for the main agent call
      search_query: "{state.refined_query}" # Comes from pre_step
      max_results: "{state.search_result_count}"
    output: state.raw_search_results # Output from the main agent call
    pre_steps: # Steps execute *before* the main agent call above
      - id: refine_query_step
        type: agent # Nested agent call!
        description: "Refine user query using another inline agent."
        agent:
          define:
            name: "QueryRefiner_Inline"
            system_prompt: "Rewrite the user query for better search engine results. Query: {input}"
        input: "{state.query}" # Input for this pre_step agent
        output: state.refined_query # Output used by main agent call's input

    post_steps: # Steps execute *after* the main agent call completes successfully
      - id: filter_results_step
        type: agent
        description: "Filter search results with an inline agent."
        agent:
          definition:
            name: "ResultFilter_Inline"
            system_prompt: "Filter the search results, removing duplicates or irrelevant links. Results:\n{input}"
        input: "{state.raw_search_results}" # Input is the output of the main agent call
        output: state.filtered_results # Final output of the parent step

    next_step: present_results

  - id: present_results
    type: transform
    description: "Format final results."
    timeout: '80s'
    depends-on:
    expression: "'Found Results:\\n' + {state.filtered_results}"
    output: final_output

  - id: pre-defined-step

