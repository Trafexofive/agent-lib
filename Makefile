# Compiler
# Default to clang++, but allow override via environment variable if needed
CXX ?= clang++

# Target Executable Names
TARGET_BIN := agent-bin
TARGET_SERVER := agent-server

# Directories
BUILD_DIR := build
SRC_DIR := src
# EXT_DIR := externals # Assuming 'externals' is no longer used or merged into src/
SERVER_DIR := server
# Include directories: local 'inc', local 'server/vendor/httplib'
# Specific library include paths will be added by pkg-config
INC_DIRS := inc $(SERVER_DIR)/vendor/httplib

# --- Compiler and Linker Flags ---
# Base CXXFLAGS (apply to all C++ compilations)
# -O3 for release, -g for debug symbols. Consider -Og for debug-friendly optimization.
# -Wall -Wextra -pedantic for lots of warnings.
# -MMD -MP for generating dependency files (.d)
CXXFLAGS := -std=c++17 -Wall -Wextra -Wpedantic -O3 -g -MMD -MP

# --- pkg-config for Libraries ---
# Query pkg-config for compiler flags (like -I paths)
# 2>/dev/null suppresses errors if pkg-config or the .pc file isn't found,
# though the build would likely fail later if they are truly missing.
YAML_CPP_CFLAGS := $(shell pkg-config --cflags yaml-cpp 2>/dev/null)
JSONCPP_CFLAGS := $(shell pkg-config --cflags jsoncpp 2>/dev/null)

# Query pkg-config for linker flags (like -L paths and -l library names)
YAML_CPP_LIBS := $(shell pkg-config --libs yaml-cpp 2>/dev/null)
JSONCPP_LIBS := $(shell pkg-config --libs jsoncpp 2>/dev/null)

# Construct final CPPFLAGS for the compiler
# This includes local include directories and those provided by pkg-config
CPPFLAGS := $(foreach dir,$(INC_DIRS),-I$(dir)) $(YAML_CPP_CFLAGS) $(JSONCPP_CFLAGS)

# Construct final LDFLAGS for the linker
# Base libraries + those provided by pkg-config
# -pthread is needed for std::thread (used by httplib)
LDFLAGS := -lcurl -pthread $(YAML_CPP_LIBS) $(JSONCPP_LIBS)

# --- Source Files ---
# Helper to recursively find files
rwildcard = $(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))

# Define main source files for each target
MAIN_SRC_BIN := import.main.cpp
MAIN_SRC_SERVER := $(SERVER_DIR)/server.cpp

# Recursively find all .cpp source files in the src/ directory
# If you had an 'externals' directory with .cpp files, you would add:
# EXT_SOURCES := $(call rwildcard,$(EXT_DIR),*.cpp)
COMMON_SRC_FILES := $(call rwildcard,$(SRC_DIR),*.cpp)
# COMMON_SRC_FILES += $(EXT_SOURCES) # Uncomment if 'externals' is used

# --- Object Files ---
# Generate object file paths, placing them into the BUILD_DIR while preserving subdirectory structure.
# For common sources (everything in src/)
COMMON_OBJECTS := $(patsubst %.cpp,$(BUILD_DIR)/%.o,$(COMMON_SRC_FILES))

# For the main file of agent-bin
BIN_MAIN_OBJECT := $(patsubst %.cpp,$(BUILD_DIR)/%.o,$(MAIN_SRC_BIN))

# For the main file of agent-server
SERVER_MAIN_OBJECT := $(patsubst %.cpp,$(BUILD_DIR)/%.o,$(MAIN_SRC_SERVER))

# All object files (used for dependency generation)
ALL_OBJECTS := $(BIN_MAIN_OBJECT) $(SERVER_MAIN_OBJECT) $(COMMON_OBJECTS)

# Dependency files (.d) generated by -MMD -MP flags
DEPS := $(ALL_OBJECTS:.o=.d)

# --- Targets ---

# Default target: build the server
all: $(TARGET_SERVER)

# Rule to build the 'agent-bin' executable
$(TARGET_BIN): $(BIN_MAIN_OBJECT) $(COMMON_OBJECTS)
	@echo "Linking $(TARGET_BIN)..."
	$(CXX) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)
	@echo "$(TARGET_BIN) built successfully."

# Rule to build the 'agent-server' executable
$(TARGET_SERVER): $(SERVER_MAIN_OBJECT) $(COMMON_OBJECTS)
	@echo "Linking $(TARGET_SERVER)..."
	$(CXX) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)
	@echo "$(TARGET_SERVER) built successfully."

# Generic rule for compiling any .cpp file into its corresponding .o file in BUILD_DIR
# $(CPPFLAGS) now contains all necessary -I paths from pkg-config and local INC_DIRS
$(BUILD_DIR)/%.o: %.cpp
	@echo "Compiling $< -> $@"
	@mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

# Include all generated dependency files
# The minus sign means 'make' won't complain if the .d files don't exist yet (e.g., on first run or after clean)
-include $(DEPS)

# --- Phony Targets (Convenience) ---
.PHONY: all bin server clean re re-bin re-server run-bin run-server debug

bin: $(TARGET_BIN)
server: $(TARGET_SERVER)

clean:
	@echo "Cleaning build files..."
	rm -f $(TARGET_BIN) $(TARGET_SERVER)
	rm -rf $(BUILD_DIR)
	@echo "Clean complete."

# Rebuild targets
re: clean all
re-bin: clean bin
re-server: clean server

# Run targets (simple execution, no arguments passed here)
run-bin: bin
	@echo "Running $(TARGET_BIN)..."
	./$(TARGET_BIN)

run-server: server
	@echo "Running $(TARGET_SERVER)..."
	./$(TARGET_SERVER)

# Debug target to inspect Makefile variables
debug:
	@echo "--- Makefile Debug ---"
	@echo "CXX: $(CXX)"
	@echo "TARGET_BIN: $(TARGET_BIN)"
	@echo "TARGET_SERVER: $(TARGET_SERVER)"
	@echo "INC_DIRS: $(INC_DIRS)"
	@echo ""
	@echo "CXXFLAGS: $(CXXFLAGS)"
	@echo "YAML_CPP_CFLAGS: $(YAML_CPP_CFLAGS)"
	@echo "JSONCPP_CFLAGS: $(JSONCPP_CFLAGS)"
	@echo "CPPFLAGS: $(CPPFLAGS)"
	@echo ""
	@echo "YAML_CPP_LIBS: $(YAML_CPP_LIBS)"
	@echo "JSONCPP_LIBS: $(JSONCPP_LIBS)"
	@echo "LDFLAGS: $(LDFLAGS)"
	@echo ""
	@echo "MAIN_SRC_BIN: $(MAIN_SRC_BIN)"
	@echo "BIN_MAIN_OBJECT: $(BIN_MAIN_OBJECT)"
	@echo "MAIN_SRC_SERVER: $(MAIN_SRC_SERVER)"
	@echo "SERVER_MAIN_OBJECT: $(SERVER_MAIN_OBJECT)"
	@echo ""
	@echo "COMMON_SRC_FILES: $(COMMON_SRC_FILES)"
	@echo "COMMON_OBJECTS: $(COMMON_OBJECTS)"
	@echo ""
	@echo "ALL_OBJECTS: $(ALL_OBJECTS)"
	@echo "DEPS: $(DEPS)"
	@echo "----------------------"

# Prevent Make from deleting intermediate object files (.o) which are needed for linking
# and for dependency tracking with .d files.
.SECONDARY: $(ALL_OBJECTS)
